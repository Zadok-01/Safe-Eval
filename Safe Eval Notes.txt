Safe Eval


Introduction

From time to time it is necessary to evaluate simple mathematical 
expressions that are written as strings.  The typical way to do this is to 
pass the string to the built-in function 'eval'.  This works well, but a 
quick search of thew internet will reveal a myriad of articles explainig 
how dangerous this is.  Is it indeed a risky operation?  In what 
circumstances?  If there are risks, how can these be avoided?


The Risks

I do not subscribe to the view that the use of 'eval' is always risky.  It 
all depends how it is used.  (Note that similar considerations apply to the 
built-in function 'exec'.)  If you write a script that uses 'eval' then 
that is safe.  The problem arises when the string passed to 'eval' is the 
result of user input produced using the function 'input'.  This could allow 
a user to enter some code that has a disastrous effect upon the computer 
running the code.

I do not propose to explain what sort of input would have this effect; 
there are plenty of examples available.  I have seen simple examples, that 
if executed, would delete part of the operating system or re-format the 
hard drive.

There is no likelihood of this happenning with code you write yourself and 
run on your own machine.  Neither is there likly to be if you passed this 
code to another so long as that person was advised how it works.  Both of 
you have easier ways of damging your own machines than devising some 
appropriate expression to pass to 'eval'.

The problem does arise, however, should someone else use your machine.  
Even more likely, these days, is a situation where the code runs on your 
machine (or one you maintain e.g. a server) and that code is made 
publically available via network or webpage etc.  A remote unknown user 
with mailicious intent could then, in principle, cause untold harm.


Avoiding Risks

I shall mention two straightforward ways to minimise risks.

The first is to analyse or parse the expression string to ensure that it 
only contains appropriate content.  Perhaps the constituent parts of the 
expression could be entered by the user separately and a count of these 
components would serve as an additional check.

Another way would be to use the second and third arguments to the 'evel' 
function to ensure that the expression is evealuated and run in a 
controlled environment that does not have access to anything that could be 
used in a harmful way.  A simple way would be to forcible set the 'globals' 
and 'locals' namspace dictionaries to be empty, but more elaborate schemes 
could be used.

A combination of both will reduce the risks to an acceptable level in many 
cases.  Ultimately, such techniques still rely on the use of the function 
'eval' and, so, for true peace of mind it might be best to avoid use of it 
altogether.


A Different Approach

In this exercise any use of the function 'eval' is entirely avoided.  The 
expression string is parsed and evaluated using the tools in the 'ast' 
(abstract syntax tree) module.  This allows just a portion of the language 
to be used in parsing an expression.  Anything outside what is included is 
then deemed an unacceptable expression.  This is what provides the 
security; nothing other than arithmetical or simple mathematical 
expressions is permitted.

This is solution to avoid the risks outlined about is not absolute.  I am 
sure that the solution offered is adequeate for most needs.  I have no 
doubt that it could be made more restrictive or, alternatively, be altered 
to allow more aspects of the python language to be used without 
compromising security.

I trust that you may find it of some use.

